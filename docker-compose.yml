version: "3.7"

# volumes: The contents of any volume is stored in a directory under /var/lib/docker/volumes/ and get
# mounted to any container that uses the volume. In this way, the data that your users will create will
# persist in the app-data volume even if you remove and recreate the database container.
volumes:
  database_volume:

# networks: Secure connection between containers (i.e.: creates a bridge between containers to communicate through).
#networks:
#  app-network:
#    driver: bridge

# service: A running container with definitions and configurations about how each container image will run.
services:

  # --------------------------------------------- PostgreSQL
  database:
    container_name: database
    build:
      context: ./database
      dockerfile: Dockerfile
#      target: development
    ports:
      - "5432:5432"
      # - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    env_file:
      - ./env
    restart: unless-stopped
    volumes:
      - ./database_volume:/var/lib/postgresql/data
#    networks:
#      - app-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
#    healthcheck:
#      test: pg_isready -U ${POSTGRES_USER}
#      # test: [ "pg_isready", "-U", "${POSTGRES_USER}" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s
  #    healthcheck:
  #      test: /healthchecks/postgres.sh
  #      interval: "5s"
  #    secrets:
  #      - db-password

  # --------------------------------------------- nestJS
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
#      target: development
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "8080:80"
      # - "${BACKEND_PORT}:${BACKEND_PORT}"
    env_file:
      - ./env
    restart: on-failure
#    networks:
#      - app-network
#    secrets:
#      - db-password

  # --------------------------------------------- ReactJS
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
#      target: development
    depends_on:
      backend:
        condition: service_started
    ports:
      - "4000:4000"
      # - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    restart: on-failure
#    networks:
#      - app-network