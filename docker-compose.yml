version: '3.7'

# service: A running container with definitions and configurations about how each container image will run.
services:
    # --------------------------------------------- PostgreSQL
    postgres_db:
        container_name: database
        image: postgres
        ports:
            - "${POSTGRES_PORT}:${POSTGRES_PORT}"
        volumes:
            - ./backend/_database_volume:/var/lib/postgresql/data
            # TODO: Check if this is the real path from postgres with data we want to save
        env_file:
            - ./.env
        #        restart: unless-stopped
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_HOST=${POSTGRES_HOST}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_PORT=${POSTGRES_PORT}

        # healthcheck:
        #   test: pg_isready -U ${POSTGRES_USER}
        #   # test: [ "pg_isready", "-U", "${POSTGRES_USER}" ]
        #   interval: 10s
        #   timeout: 5s
        #   retries: 5
        #   start_period: 30s
        # healthcheck:
        #   test: /healthchecks/postgres.sh
        #   interval: "5s"

    # --------------------------------------------- nestJS
    nest_app:
        container_name: backend
        image: node:18.16.0
        command: sh -c "npm install && npm run start:dev"
        # build:
        #     context: ./backend
        #     dockerfile: Dockerfile
        #     args:
        #         MYSECRET: ${SECRET}
        ports:
            - "${BACKEND_PORT}:${BACKEND_PORT}"
        working_dir: /backend
        volumes: #-> DO WE WANT TO SAVE THINGS FROM THE BACKEND CONTAINER?
            - type: bind
              source: ./backend
              target: /backend
            # - ./backend:/backend
            # here it was myapp and now I put nonsense... it should be the direcotry inside the container that we want to save things on the host machine... maybe that is only necessary for the database???
              # - ./_backend_volume:/myapp:rw,uid=<501>,gid=<20>
#        restart: on-failure
        depends_on:
            - postgres_db
#            postgres_db:
#                condition: service_healthy
        env_file:
            - ./.env
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_HOST=${POSTGRES_HOST}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_PORT=${POSTGRES_PORT}
            - BACKEND_PORT=${BACKEND_PORT}
            - CLIENT_ID=${CLIENT_ID}
            - SECRET=${SECRET}
            - REDIRECT=${REDIRECT}
            - FRONTEND=${FRONTEND}
            - BACKEND=${BACKEND}
            - DATABASE=${DATABASE}
            - UPLOADS=${UPLOADS}
            - EHOST=${EHOST}
            - EPORT=${EPORT}
            - APASS=${APASS}
            - JWT_SECRET=${JWT_SECRET}
            # - EPASS=${EPASS}


    # --------------------------------------------- ReactJS
    react_app:
        container_name: frontend
        image: node:18.16.0
        command: sh -c "npm install && npm run dev"
        # build:
        #     # context: ./frontend
        #     context: ./frontend_tsx
        #     dockerfile: Dockerfile
        ports:
            - "${FRONTEND_PORT}:8000"
        working_dir: /frontend
        volumes: #-> DO WE WANT TO SAVE THINGS FROM THE FRONTEND CONTAINER?
            - type: bind
              source: ./frontend
              target: /frontend
            # - ./frontend:/frontend
            # - ./frontend_tsx:/frontend_tsx
            # - ./frontend/_frontend_volume:/nonsense
            # here it was myapp and now I put nonsense... it should be the direcotry inside the container that we want to save things on the host machine... maybe that is only necessary for the database???
            # - ./_frontend_volume:/myapp:rw,uid=<501>,gid=<20>
            # - ./path/on/host:/myapp/node_modules/.cache
        # restart: on-failure
        env_file:
            - ./.env
        environment:
            - VITE_BACKEND:${VITE_BACKEND}
        depends_on:
            - nest_app
            - postgres_db
        #            nest_app:
        #                condition: service_started
        #            postgres_db:
        #                condition: service_started
        tty: true



# --------------------------------------------- Extra: PgAdmin
    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4:7
        logging:
            driver: none
        ports:
            - "${PGADMIN_LISTEN_PORT}:${PGADMIN_LISTEN_PORT}"
        volumes:
            - ./backend/_pgadmin_data:/var/lib/pgadmin
        env_file:
            - ./.env
        environment:
           - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
           - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
           - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
           - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE}
           - GUNICORN_ACCESS_LOGFILE=${GUNICORN_ACCESS_LOGFILE}
           - PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED=False
        depends_on:
            - postgres_db

# volumes:
#      - ./<host_machine_dir_path>:/<container_data_dir_path>
# This line specifies a volume mapping between a directory on the host machine (left side of the colon) and a data
# directory inside the container (right side of the colon). This means that the contents of the host machine
# directory will be synchronized/mounted into the directory inside the container.
# This allows you to change the application code on your host machine and the changes will be reflected inside the
# container, enabling live-reloading without rebuilding the container each time a change is made.
